/// <reference types="spotify-api" />
import SpotifyWebApi from 'spotify-web-api-node';
import type { playlistInfo, trackType } from '../types';
declare type tokensType = {
    clientId: string;
    accessToken: string;
    accessTokenExpirationTimestampMs: number;
    isAnonymous: true;
};
/**
 * Export core spotify module
 */
export declare const spotifyApi: SpotifyWebApi;
/**
 * Set spotify tokens anonymously. This is required to bypass api limits.
 * @returns {tokensType}
 */
export declare const setSpotifyAnonymousToken: () => Promise<tokensType>;
/**
 * Convert spotify songs to deezer
 * @param {String} id Spotify track id
 * @returns {trackType}
 */
export declare const track2deezer: (id: string) => Promise<trackType>;
/**
 * Convert spotify albums to deezer
 * @param {String} id Spotify track id
 */
export declare const album2deezer: (id: string) => Promise<[import("../types").albumType, trackType[]]>;
/**
 * Convert playlist to deezer
 * @param {String} id Spotify track id
 */
export declare const playlist2Deezer: (id: string, onError?: ((item: SpotifyApi.PlaylistTrackObject, index: number, err: Error) => void) | undefined) => Promise<[playlistInfo, trackType[]]>;
/**
 * Convert artist songs to deezer. Maxium of 10 tracks.
 * @param {String} id Spotify track id
 */
export declare const artist2Deezer: (id: string, onError?: ((item: SpotifyApi.TrackObjectFull, index: number, err: Error) => void) | undefined) => Promise<trackType[]>;
export {};
