"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseInfo = exports.getUrlParts = void 0;
const __1 = require("../");
const spotify_uri_1 = __importDefault(require("spotify-uri"));
const axios_1 = __importDefault(require("axios"));
const spotify = __importStar(require("./spotify"));
const tidal = __importStar(require("./tidal"));
const youtube = __importStar(require("./youtube"));
const p_queue_1 = __importDefault(require("p-queue"));
const queue = new p_queue_1.default({ concurrency: 10 });
const getUrlParts = async (url, setToken = false) => {
    if (url.startsWith('spotify:')) {
        const spotify = url.split(':');
        url = 'https://open.spotify.com/' + spotify[1] + '/' + spotify[2];
    }
    const site = url.match(/deezer|spotify|tidal|youtu\.?be/);
    if (!site) {
        throw new Error('Unknown URL: ' + url);
    }
    switch (site[0]) {
        case 'deezer':
            if (url.includes('page.link')) {
                const { request } = await axios_1.default.head(url);
                url = request.res.responseUrl;
            }
            const deezerUrlParts = url.split(/\/(\w+)\/(\d+)/);
            return { type: deezerUrlParts[1], id: deezerUrlParts[2] };
        case 'spotify':
            const spotifyUrlParts = spotify_uri_1.default.parse(url);
            if (setToken) {
                await spotify.setSpotifyAnonymousToken();
            }
            return { type: ('spotify-' + spotifyUrlParts.type), id: spotifyUrlParts.id };
        case 'tidal':
            const tidalUrlParts = url.split(/\/(\w+)\/(\d+|\w+-\w+-\w+-\w+-\w+)/);
            return { type: ('tidal-' + tidalUrlParts[1]), id: tidalUrlParts[2] };
        case 'youtube':
            let yotubeId = url.split('v=')[1];
            if (yotubeId.includes('&')) {
                yotubeId = yotubeId.split('&')[0];
            }
            return { type: 'youtube-track', id: yotubeId };
        case 'youtu.be':
            return { type: 'youtube-track', id: url.split('/').pop() };
        default:
            throw new Error('Unable to parse URL: ' + url);
    }
};
exports.getUrlParts = getUrlParts;
/**
 * Deezer, Spotify or Tidal links only
 * @param {String} url
 */
const parseInfo = async (url) => {
    const info = await (0, exports.getUrlParts)(url, true);
    if (!info.id) {
        throw new Error('Unable to parse id');
    }
    let linktype = 'track';
    let linkinfo = {};
    let tracks = [];
    switch (info.type) {
        case 'track': {
            tracks.push(await (0, __1.getTrackInfo)(info.id));
            break;
        }
        case 'album':
        case 'audiobook':
            linkinfo = await (0, __1.getAlbumInfo)(info.id);
            linktype = 'album';
            const albumTracks = await (0, __1.getAlbumTracks)(info.id);
            tracks = albumTracks.data;
            break;
        case 'playlist':
            linkinfo = await (0, __1.getPlaylistInfo)(info.id);
            linktype = 'playlist';
            const playlistTracks = await (0, __1.getPlaylistTracks)(info.id);
            tracks = playlistTracks.data;
            break;
        case 'artist':
            linkinfo = await (0, __1.getArtistInfo)(info.id);
            linktype = 'artist';
            const artistAlbums = await (0, __1.getDiscography)(info.id);
            await queue.addAll(artistAlbums.data.map((album) => {
                return async () => {
                    if (album.ARTISTS.find((a) => a.ART_ID === info.id)) {
                        const albumTracks = await (0, __1.getAlbumTracks)(album.ALB_ID);
                        tracks = [...tracks, ...albumTracks.data.filter((t) => t.ART_ID === info.id)];
                    }
                };
            }));
            break;
        case 'spotify-track':
            tracks.push(await spotify.track2deezer(info.id));
            break;
        case 'spotify-album':
            const [spotifyAlbumInfo, spotifyTracks] = await spotify.album2deezer(info.id);
            tracks = spotifyTracks;
            linkinfo = spotifyAlbumInfo;
            linktype = 'album';
            break;
        case 'spotify-playlist':
            const [spotifyPlaylistInfo, spotifyPlaylistTracks] = await spotify.playlist2Deezer(info.id);
            tracks = spotifyPlaylistTracks;
            linkinfo = spotifyPlaylistInfo;
            linktype = 'playlist';
            break;
        case 'spotify-artist':
            tracks = await spotify.artist2Deezer(info.id);
            linktype = 'artist';
            break;
        case 'tidal-track':
            tracks.push(await tidal.track2deezer(info.id));
            break;
        case 'tidal-album':
            const [tidalAlbumInfo, tidalAlbumTracks] = await tidal.album2deezer(info.id);
            tracks = tidalAlbumTracks;
            linkinfo = tidalAlbumInfo;
            linktype = 'album';
            break;
        case 'tidal-playlist':
            const [tidalPlaylistInfo, tidalPlaylistTracks] = await tidal.playlist2Deezer(info.id);
            tracks = tidalPlaylistTracks;
            linkinfo = tidalPlaylistInfo;
            linktype = 'playlist';
            break;
        case 'tidal-artist':
            tracks = await tidal.artist2Deezer(info.id);
            linktype = 'artist';
            break;
        case 'youtube-track':
            tracks.push(await youtube.track2deezer(info.id));
            break;
        default:
            throw new Error('Unknown type: ' + info.type);
    }
    return {
        info,
        linktype,
        linkinfo,
        tracks: tracks.map((t) => {
            if (t.VERSION && !t.SNG_TITLE.includes(t.VERSION)) {
                t.SNG_TITLE += ' ' + t.VERSION;
            }
            return t;
        }),
    };
};
exports.parseInfo = parseInfo;
