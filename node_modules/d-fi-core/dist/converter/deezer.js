"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upc2deezer = exports.isrc2deezer = void 0;
const axios_1 = __importDefault(require("axios"));
const delay_1 = __importDefault(require("delay"));
const api_1 = require("../api");
const instance = axios_1.default.create({ baseURL: 'https://api.deezer.com/', timeout: 15000 });
const isrc2deezer = async (name, isrc) => {
    if (!isrc) {
        throw new Error('ISRC code not found for ' + name);
    }
    const { data } = await instance.get('track/isrc:' + isrc);
    if (data.error) {
        throw new Error(`No match on deezer for ${name} (ISRC: ${isrc})`);
    }
    return await (0, api_1.getTrackInfo)(data.id);
};
exports.isrc2deezer = isrc2deezer;
const upc2deezer = async (name, upc) => {
    if (!upc) {
        throw new Error('UPC code not found for ' + name);
    }
    else if (upc.length > 12 && upc.startsWith('0')) {
        upc = upc.slice(-12);
    }
    const { data } = await instance.get('album/upc:' + upc);
    if (data.error) {
        throw new Error(`No match on deezer for ${name} (UPC: ${upc})`);
    }
    const albumInfo = await (0, api_1.getAlbumInfo)(data.id);
    const albumTracks = await (0, api_1.getAlbumTracks)(data.id);
    return [albumInfo, albumTracks.data];
};
exports.upc2deezer = upc2deezer;
// Retry on rate limit error
instance.interceptors.response.use(async (response) => {
    if (response.data.error && Object.keys(response.data.error).length > 0) {
        if (response.data.error.code === 4) {
            await delay_1.default.range(1000, 1500);
            return await instance(response.config);
        }
    }
    return response;
});
