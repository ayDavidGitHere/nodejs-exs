"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.artist2Deezer = exports.playlist2Deezer = exports.album2deezer = exports.track2deezer = exports.setSpotifyAnonymousToken = exports.spotifyApi = void 0;
const axios_1 = __importDefault(require("axios"));
const spotify_web_api_node_1 = __importDefault(require("spotify-web-api-node"));
const p_queue_1 = __importDefault(require("p-queue"));
const deezer_1 = require("./deezer");
/**
 * Parse offset number
 * @param {String} next next page url
 * @returns {Number}
 */
const getOffset = (next) => {
    if (next) {
        const o = next.split('&').find((p) => p.includes('offset='));
        return o ? Number(o.split('=')[1]) : 0;
    }
    return 0;
};
/**
 * Limit process concurrency
 */
const queue = new p_queue_1.default({ concurrency: 25 });
/**
 * Export core spotify module
 */
exports.spotifyApi = new spotify_web_api_node_1.default();
/**
 * Set spotify tokens anonymously. This is required to bypass api limits.
 * @returns {tokensType}
 */
const setSpotifyAnonymousToken = async () => {
    const { data } = await axios_1.default.get('https://open.spotify.com/get_access_token?reason=transport&productType=embed');
    exports.spotifyApi.setAccessToken(data.accessToken);
    return data;
};
exports.setSpotifyAnonymousToken = setSpotifyAnonymousToken;
/**
 * Convert spotify songs to deezer
 * @param {String} id Spotify track id
 * @returns {trackType}
 */
const track2deezer = async (id) => {
    const { body } = await exports.spotifyApi.getTrack(id);
    return await (0, deezer_1.isrc2deezer)(body.name, body.external_ids.isrc);
};
exports.track2deezer = track2deezer;
/**
 * Convert spotify albums to deezer
 * @param {String} id Spotify track id
 */
const album2deezer = async (id) => {
    const { body } = await exports.spotifyApi.getAlbum(id);
    return await (0, deezer_1.upc2deezer)(body.name, body.external_ids.upc);
};
exports.album2deezer = album2deezer;
/**
 * Convert playlist to deezer
 * @param {String} id Spotify track id
 */
const playlist2Deezer = async (id, onError) => {
    const { body } = await exports.spotifyApi.getPlaylist(id);
    const tracks = [];
    let items = body.tracks.items;
    let offset = getOffset(body.tracks.next);
    while (offset !== 0) {
        const { body } = await exports.spotifyApi.getPlaylistTracks(id, { limit: 100, offset: offset ? offset : 0 });
        offset = getOffset(body.next);
        items = [...items, ...body.items];
    }
    await queue.addAll(items.map((item, index) => {
        return async () => {
            try {
                if (item.track) {
                    const track = await (0, deezer_1.isrc2deezer)(item.track.name, item.track.external_ids.isrc);
                    track.TRACK_POSITION = index + 1;
                    tracks.push(track);
                }
            }
            catch (err) {
                if (onError) {
                    onError(item, index, err);
                }
            }
        };
    }));
    const dateCreated = new Date().toISOString();
    const playlistInfoData = {
        PLAYLIST_ID: body.id,
        PARENT_USERNAME: body.owner.id,
        PARENT_USER_ID: body.owner.id,
        PICTURE_TYPE: 'cover',
        PLAYLIST_PICTURE: body.images[0].url,
        TITLE: body.name,
        TYPE: '0',
        STATUS: '0',
        USER_ID: body.owner.id,
        DATE_ADD: dateCreated,
        DATE_MOD: dateCreated,
        DATE_CREATE: dateCreated,
        NB_SONG: body.tracks.total,
        NB_FAN: 0,
        CHECKSUM: body.id,
        HAS_ARTIST_LINKED: false,
        IS_SPONSORED: false,
        IS_EDITO: false,
        __TYPE__: 'playlist',
    };
    return [playlistInfoData, tracks];
};
exports.playlist2Deezer = playlist2Deezer;
/**
 * Convert artist songs to deezer. Maxium of 10 tracks.
 * @param {String} id Spotify track id
 */
const artist2Deezer = async (id, onError) => {
    // Artist tracks are limited to 10 items
    const { body } = await exports.spotifyApi.getArtistTopTracks(id, 'GB');
    const tracks = [];
    await queue.addAll(body.tracks.map((item, index) => {
        return async () => {
            try {
                const track = await (0, deezer_1.isrc2deezer)(item.name, item.external_ids.isrc);
                tracks.push(track);
            }
            catch (err) {
                if (onError) {
                    onError(item, index, err);
                }
            }
        };
    }));
    return tracks;
};
exports.artist2Deezer = artist2Deezer;
