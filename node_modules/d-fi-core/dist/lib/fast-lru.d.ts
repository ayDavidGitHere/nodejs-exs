/**
 * Fast LRU & TTL cache
 * @param  {Integer} options.max		- Max entries in the cache. @default Infinity
 * @param  {Integer} options.ttl		- Timeout before removing entries. @default Infinity
 */
declare class FastLRU {
    _max: number;
    _ttl: number;
    _cache: Map<any, any>;
    _meta: {
        [key: string]: any;
    };
    constructor({ maxSize, ttl }: {
        maxSize?: number | undefined;
        ttl?: number | undefined;
    });
    /**
     * Add new entry
     */
    set(key: string, value: any, ttl?: number): void;
    /**
     * Get entry
     */
    get(key: string): any;
    /**
     * Get without hitting hits
     */
    peek(key: string): any;
    /**
     * Remove entry
     */
    delete(key: string): void;
    /**
     * Remove all entries
     */
    clear(): void;
    /**
     * Check has entry
     */
    has(key: string): boolean;
    /**
     * Get all kies
     * @returns {Iterator} Iterator on all kies
     */
    keys(): IterableIterator<any>;
    /**
     * Iterate over values
     */
    values(): IterableIterator<any>;
    /**
     * Iterate over entries
     */
    entries(): IterableIterator<[any, any]>;
    /**
     * For each
     */
    forEach(cb: any): void;
    /**
     * Entries total size
     */
    get size(): number;
}
export default FastLRU;
